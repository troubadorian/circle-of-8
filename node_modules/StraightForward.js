var url  = require("url");
var http = require("http");
var fs   = require("fs");
var path = require("path");
var server = null;
var parsedURL = {};
var pathname = "";
var fileLocation = "";
var query = {};
var hash = "";

var defaultViews = {
  "/" : ["../index.html","../index.htm"],
  "fallback" : DefaultFallback
};
var app  = {
  "http"   : http,
  "views"  : ViewsHandler,
  "routes" : defaultViews,
  "init"   : DefaultInit,
  "listen" : Listen
}
  
function DefaultInit() {
  if(!server) {
    server = http.createServer(RequestListener);
  };
  return app;
};

function Listen(portNumber) {
  server.listen(portNumber);
  return app; //support chaining
}


function RequestListener (request, response, _url) {
  _url     =  url.parse(request.url, true); 
  pathname = _url.pathname;
  query    = _url.query;
  hash     = _url.hash;

  if(pathname in app.routes) {
    if(typeof app.routes[pathname] === "function"){
      app.routes[pathname](request, response, _url);
    }
  } else {
    // console.log(typeof app.routes.pathname);
    app.routes["fallback"](request, response, _url);
  }
}

function ViewsHandler ( obj ) {
  for( item in obj) {
    app.routes[item] = obj[item];
  }
  // console.log(app.routes);
  return app; //support chaining
};


function DefaultRootViewController (request, response, _url) {
  response.writeHead(200, {"Content-Type": "text/html"});
  response.write("<html><head></head><body><h1>Root Folder : Default Handler</h1></body></html>");
  response.end();
}

  // if the Routes do not have the path to the service, we can check for the request
  // if the resource exists, then we add it to the Routes Object
  // else, 404 :P
function DefaultFallback (request, response, _url) {

  // Will write valid cases here in future {...}

  //Handling all 404 cases
  response.statusCode = 404;
  response.write("404 Default: file not found for Path:" + _url.pathname, 'utf8');
  response.end();
};




// .match(/\/\w*/gi)

module.exports = app;


